// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: transport/grpc/deck_service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeckServiceClient is the client API for DeckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeckServiceClient interface {
	// CreateDeck creates a new full or partial deck of cards given an optional
	// list of codes.
	CreateDeck(ctx context.Context, in *CreateDeckRequest, opts ...grpc.CallOption) (*CreateDeckResponse, error)
	// OpenDeck opens a deck of cards given an id.
	OpenDeck(ctx context.Context, in *OpenDeckRequest, opts ...grpc.CallOption) (*OpenDeckResponse, error)
	// DrawCards draws cards from a deck of cards given an id and the number of
	// cards.
	DrawCards(ctx context.Context, in *DrawCardsRequest, opts ...grpc.CallOption) (*DrawCardsResponse, error)
	// ShuffleDeck shuffles a deck of cards given an id.
	ShuffleDeck(ctx context.Context, in *ShuffleDeckRequest, opts ...grpc.CallOption) (*ShuffleDeckResponse, error)
}

type deckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeckServiceClient(cc grpc.ClientConnInterface) DeckServiceClient {
	return &deckServiceClient{cc}
}

func (c *deckServiceClient) CreateDeck(ctx context.Context, in *CreateDeckRequest, opts ...grpc.CallOption) (*CreateDeckResponse, error) {
	out := new(CreateDeckResponse)
	err := c.cc.Invoke(ctx, "/grpc.DeckService/CreateDeck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) OpenDeck(ctx context.Context, in *OpenDeckRequest, opts ...grpc.CallOption) (*OpenDeckResponse, error) {
	out := new(OpenDeckResponse)
	err := c.cc.Invoke(ctx, "/grpc.DeckService/OpenDeck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) DrawCards(ctx context.Context, in *DrawCardsRequest, opts ...grpc.CallOption) (*DrawCardsResponse, error) {
	out := new(DrawCardsResponse)
	err := c.cc.Invoke(ctx, "/grpc.DeckService/DrawCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) ShuffleDeck(ctx context.Context, in *ShuffleDeckRequest, opts ...grpc.CallOption) (*ShuffleDeckResponse, error) {
	out := new(ShuffleDeckResponse)
	err := c.cc.Invoke(ctx, "/grpc.DeckService/ShuffleDeck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeckServiceServer is the server API for DeckService service.
// All implementations must embed UnimplementedDeckServiceServer
// for forward compatibility
type DeckServiceServer interface {
	// CreateDeck creates a new full or partial deck of cards given an optional
	// list of codes.
	CreateDeck(context.Context, *CreateDeckRequest) (*CreateDeckResponse, error)
	// OpenDeck opens a deck of cards given an id.
	OpenDeck(context.Context, *OpenDeckRequest) (*OpenDeckResponse, error)
	// DrawCards draws cards from a deck of cards given an id and the number of
	// cards.
	DrawCards(context.Context, *DrawCardsRequest) (*DrawCardsResponse, error)
	// ShuffleDeck shuffles a deck of cards given an id.
	ShuffleDeck(context.Context, *ShuffleDeckRequest) (*ShuffleDeckResponse, error)
	mustEmbedUnimplementedDeckServiceServer()
}

// UnimplementedDeckServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeckServiceServer struct {
}

func (UnimplementedDeckServiceServer) CreateDeck(context.Context, *CreateDeckRequest) (*CreateDeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeck not implemented")
}
func (UnimplementedDeckServiceServer) OpenDeck(context.Context, *OpenDeckRequest) (*OpenDeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDeck not implemented")
}
func (UnimplementedDeckServiceServer) DrawCards(context.Context, *DrawCardsRequest) (*DrawCardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrawCards not implemented")
}
func (UnimplementedDeckServiceServer) ShuffleDeck(context.Context, *ShuffleDeckRequest) (*ShuffleDeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShuffleDeck not implemented")
}
func (UnimplementedDeckServiceServer) mustEmbedUnimplementedDeckServiceServer() {}

// UnsafeDeckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeckServiceServer will
// result in compilation errors.
type UnsafeDeckServiceServer interface {
	mustEmbedUnimplementedDeckServiceServer()
}

func RegisterDeckServiceServer(s grpc.ServiceRegistrar, srv DeckServiceServer) {
	s.RegisterService(&DeckService_ServiceDesc, srv)
}

func _DeckService_CreateDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).CreateDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DeckService/CreateDeck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).CreateDeck(ctx, req.(*CreateDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_OpenDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).OpenDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DeckService/OpenDeck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).OpenDeck(ctx, req.(*OpenDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_DrawCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrawCardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).DrawCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DeckService/DrawCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).DrawCards(ctx, req.(*DrawCardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_ShuffleDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShuffleDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).ShuffleDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DeckService/ShuffleDeck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).ShuffleDeck(ctx, req.(*ShuffleDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeckService_ServiceDesc is the grpc.ServiceDesc for DeckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DeckService",
	HandlerType: (*DeckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeck",
			Handler:    _DeckService_CreateDeck_Handler,
		},
		{
			MethodName: "OpenDeck",
			Handler:    _DeckService_OpenDeck_Handler,
		},
		{
			MethodName: "DrawCards",
			Handler:    _DeckService_DrawCards_Handler,
		},
		{
			MethodName: "ShuffleDeck",
			Handler:    _DeckService_ShuffleDeck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/deck_service.proto",
}
