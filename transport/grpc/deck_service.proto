syntax = "proto3";

package grpc;

option go_package = "github.com/mgjules/deckr/grpc;grpc";

import "transport/grpc/deck.proto";

// CreateDeckRequest holds the composition and optional codes needed to create a deck.
message CreateDeckRequest {
  optional string comp = 1;
  repeated string codes = 2;
}

// CreateDeckResponse holds the deck created.
message CreateDeckResponse {
  DeckClosed deck = 1;
}

// OpenDeckRequest holds the deck id needed to open a deck.
message OpenDeckRequest { string id = 1; }

// OpenDeckResponse holds the deck opened.
message OpenDeckResponse {
  DeckOpened deck = 1;
}

// DrawCardsRequest holds the id of the deck and number of cards to draw from the deck.
message DrawCardsRequest {
  string id = 1;
  int32 num = 2;
}

// DrawCardsResponse holds the cards drawn.
message DrawCardsResponse {
  repeated Card cards = 1;
}

// ShuffleDeckRequest holds the id of the deck to shuffle.
message ShuffleDeckRequest { string id = 1; }

// ShuffleDeckResponse holds the message after shuffling a deck.
message ShuffleDeckResponse { string message = 1; }

service DeckService {
  // CreateDeck creates a new full or partial deck of cards given an optional
  // list of codes.
  rpc CreateDeck(CreateDeckRequest) returns (CreateDeckResponse) {}

  // OpenDeck opens a deck of cards given an id.
  rpc OpenDeck(OpenDeckRequest) returns (OpenDeckResponse) {}

  // DrawCards draws cards from a deck of cards given an id and the number of
  // cards.
  rpc DrawCards(DrawCardsRequest) returns (DrawCardsResponse) {}

  // ShuffleDeck shuffles a deck of cards given an id.
  rpc ShuffleDeck(ShuffleDeckRequest) returns (ShuffleDeckResponse) {}
}