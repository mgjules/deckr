// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: transport/v1/deck_service.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CreateDeckRequest holds the composition and optional codes needed to create a deck.
type CreateDeckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comp  *string  `protobuf:"bytes,1,opt,name=comp,proto3,oneof" json:"comp,omitempty"`
	Codes []string `protobuf:"bytes,2,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *CreateDeckRequest) Reset() {
	*x = CreateDeckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_v1_deck_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeckRequest) ProtoMessage() {}

func (x *CreateDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_v1_deck_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeckRequest.ProtoReflect.Descriptor instead.
func (*CreateDeckRequest) Descriptor() ([]byte, []int) {
	return file_transport_v1_deck_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateDeckRequest) GetComp() string {
	if x != nil && x.Comp != nil {
		return *x.Comp
	}
	return ""
}

func (x *CreateDeckRequest) GetCodes() []string {
	if x != nil {
		return x.Codes
	}
	return nil
}

// CreateDeckResponse holds the deck created.
type CreateDeckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deck *DeckClosed `protobuf:"bytes,1,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (x *CreateDeckResponse) Reset() {
	*x = CreateDeckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_v1_deck_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeckResponse) ProtoMessage() {}

func (x *CreateDeckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transport_v1_deck_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeckResponse.ProtoReflect.Descriptor instead.
func (*CreateDeckResponse) Descriptor() ([]byte, []int) {
	return file_transport_v1_deck_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDeckResponse) GetDeck() *DeckClosed {
	if x != nil {
		return x.Deck
	}
	return nil
}

// OpenDeckRequest holds the deck id needed to open a deck.
type OpenDeckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpenDeckRequest) Reset() {
	*x = OpenDeckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_v1_deck_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenDeckRequest) ProtoMessage() {}

func (x *OpenDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_v1_deck_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenDeckRequest.ProtoReflect.Descriptor instead.
func (*OpenDeckRequest) Descriptor() ([]byte, []int) {
	return file_transport_v1_deck_service_proto_rawDescGZIP(), []int{2}
}

func (x *OpenDeckRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// OpenDeckResponse holds the deck opened.
type OpenDeckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deck *DeckOpened `protobuf:"bytes,1,opt,name=deck,proto3" json:"deck,omitempty"`
}

func (x *OpenDeckResponse) Reset() {
	*x = OpenDeckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_v1_deck_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenDeckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenDeckResponse) ProtoMessage() {}

func (x *OpenDeckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transport_v1_deck_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenDeckResponse.ProtoReflect.Descriptor instead.
func (*OpenDeckResponse) Descriptor() ([]byte, []int) {
	return file_transport_v1_deck_service_proto_rawDescGZIP(), []int{3}
}

func (x *OpenDeckResponse) GetDeck() *DeckOpened {
	if x != nil {
		return x.Deck
	}
	return nil
}

// DrawCardsRequest holds the id of the deck and number of cards to draw from the deck.
type DrawCardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Num int32  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *DrawCardsRequest) Reset() {
	*x = DrawCardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_v1_deck_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawCardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardsRequest) ProtoMessage() {}

func (x *DrawCardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_v1_deck_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardsRequest.ProtoReflect.Descriptor instead.
func (*DrawCardsRequest) Descriptor() ([]byte, []int) {
	return file_transport_v1_deck_service_proto_rawDescGZIP(), []int{4}
}

func (x *DrawCardsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DrawCardsRequest) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

// DrawCardsResponse holds the cards drawn.
type DrawCardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cards []*Card `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
}

func (x *DrawCardsResponse) Reset() {
	*x = DrawCardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_v1_deck_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawCardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawCardsResponse) ProtoMessage() {}

func (x *DrawCardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transport_v1_deck_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawCardsResponse.ProtoReflect.Descriptor instead.
func (*DrawCardsResponse) Descriptor() ([]byte, []int) {
	return file_transport_v1_deck_service_proto_rawDescGZIP(), []int{5}
}

func (x *DrawCardsResponse) GetCards() []*Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

// ShuffleDeckRequest holds the id of the deck to shuffle.
type ShuffleDeckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ShuffleDeckRequest) Reset() {
	*x = ShuffleDeckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_v1_deck_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShuffleDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShuffleDeckRequest) ProtoMessage() {}

func (x *ShuffleDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_transport_v1_deck_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShuffleDeckRequest.ProtoReflect.Descriptor instead.
func (*ShuffleDeckRequest) Descriptor() ([]byte, []int) {
	return file_transport_v1_deck_service_proto_rawDescGZIP(), []int{6}
}

func (x *ShuffleDeckRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// ShuffleDeckResponse holds the message after shuffling a deck.
type ShuffleDeckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ShuffleDeckResponse) Reset() {
	*x = ShuffleDeckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transport_v1_deck_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShuffleDeckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShuffleDeckResponse) ProtoMessage() {}

func (x *ShuffleDeckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_transport_v1_deck_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShuffleDeckResponse.ProtoReflect.Descriptor instead.
func (*ShuffleDeckResponse) Descriptor() ([]byte, []int) {
	return file_transport_v1_deck_service_proto_rawDescGZIP(), []int{7}
}

func (x *ShuffleDeckResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_transport_v1_deck_service_proto protoreflect.FileDescriptor

var file_transport_v1_deck_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x1a,
	0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67,
	0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x63,
	0x6f, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x6d,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x22, 0x42, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x65, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6b, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x22, 0x21, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x44,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x10, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6b,
	0x4f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x52, 0x04, 0x64, 0x65, 0x63, 0x6b, 0x22, 0x34, 0x0a, 0x10,
	0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e,
	0x75, 0x6d, 0x22, 0x3d, 0x0a, 0x11, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x22, 0x24, 0x0a, 0x12, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x53, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xf4, 0x0b, 0x0a, 0x0b, 0x44, 0x65, 0x63,
	0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe3, 0x02, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x02, 0x92, 0x41, 0xfc,
	0x01, 0x12, 0x4c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x77,
	0x20, 0x66, 0x75, 0x6c, 0x6c, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x20, 0x64, 0x65, 0x63, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x72, 0x64, 0x73, 0x20, 0x67,
	0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x2a,
	0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x4a, 0x20, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x19, 0x0a, 0x17, 0x41, 0x20, 0x66, 0x72, 0x65, 0x73, 0x68, 0x6c, 0x79, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x64, 0x65, 0x63, 0x6b, 0x2e, 0x4a, 0x40, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x39, 0x0a, 0x1a, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x64, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a,
	0x3c, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x35, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e,
	0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0b, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x12, 0xdd,
	0x02, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x44,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x02, 0x92, 0x41, 0xf7,
	0x01, 0x12, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x64, 0x65, 0x63, 0x6b, 0x20,
	0x6f, 0x66, 0x20, 0x63, 0x61, 0x72, 0x64, 0x73, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61,
	0x6e, 0x20, 0x69, 0x64, 0x2e, 0x2a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x6b, 0x4a,
	0x10, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x09, 0x0a, 0x07, 0x41, 0x20, 0x64, 0x65, 0x63, 0x6b,
	0x2e, 0x4a, 0x40, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x39, 0x0a, 0x1a, 0x54, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6d, 0x61, 0x6c, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2e, 0x0a, 0x0f, 0x44, 0x65,
	0x63, 0x6b, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x1b, 0x0a,
	0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x3c, 0x0a, 0x03, 0x35, 0x30,
	0x30, 0x12, 0x35, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a,
	0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x98,
	0x03, 0x0a, 0x09, 0x44, 0x72, 0x61, 0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x61, 0x77,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x02,
	0x92, 0x41, 0xa4, 0x02, 0x12, 0x45, 0x64, 0x72, 0x61, 0x77, 0x73, 0x20, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x61, 0x20, 0x64, 0x65, 0x63, 0x6b, 0x20, 0x6f, 0x66,
	0x20, 0x63, 0x61, 0x72, 0x64, 0x73, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20,
	0x69, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x2a, 0x09, 0x44, 0x72, 0x61,
	0x77, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4a, 0x19, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x12, 0x0a,
	0x10, 0x41, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x4a, 0x40, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x39, 0x0a, 0x1a, 0x54, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x77, 0x61, 0x73, 0x20, 0x6d, 0x61, 0x6c, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4a, 0x35, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x2e, 0x0a, 0x0f, 0x44, 0x65,
	0x63, 0x6b, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x1b, 0x0a,
	0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x3c, 0x0a, 0x03, 0x35, 0x30,
	0x30, 0x12, 0x35, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a,
	0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x32, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x64,
	0x72, 0x61, 0x77, 0x2f, 0x7b, 0x6e, 0x75, 0x6d, 0x7d, 0x12, 0x83, 0x03, 0x0a, 0x0b, 0x53, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xae,
	0x02, 0x92, 0x41, 0x8c, 0x02, 0x12, 0x25, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x73, 0x20,
	0x61, 0x20, 0x64, 0x65, 0x63, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x72, 0x64, 0x73, 0x20,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x64, 0x2e, 0x2a, 0x0b, 0x53, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x6b, 0x4a, 0x1f, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x18, 0x0a, 0x16, 0x41, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c,
	0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4a, 0x40, 0x0a, 0x03, 0x34, 0x30,
	0x30, 0x12, 0x39, 0x0a, 0x1a, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x77, 0x61, 0x73, 0x20, 0x6d, 0x61, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x2e, 0x12,
	0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x35, 0x0a, 0x03,
	0x34, 0x30, 0x34, 0x12, 0x2e, 0x0a, 0x0f, 0x44, 0x65, 0x63, 0x6b, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4a, 0x3c, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x35, 0x0a, 0x16, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x63,
	0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x42,
	0xb6, 0x02, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x67, 0x6a, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x64, 0x65, 0x63, 0x6b, 0x72, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x92, 0x41, 0x88, 0x02,
	0x12, 0xde, 0x01, 0x0a, 0x05, 0x44, 0x65, 0x63, 0x6b, 0x72, 0x12, 0x31, 0x41, 0x20, 0x52, 0x45,
	0x53, 0x54, 0x2f, 0x67, 0x52, 0x50, 0x43, 0x20, 0x41, 0x50, 0x49, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x64,
	0x65, 0x63, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x22, 0x4e, 0x0a,
	0x17, 0x4d, 0x69, 0x63, 0x68, 0x61, 0xc3, 0xab, 0x6c, 0x20, 0x47, 0x69, 0x6f, 0x76, 0x61, 0x6e,
	0x6e, 0x69, 0x20, 0x4a, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a,
	0x2f, 0x2f, 0x6d, 0x67, 0x6a, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x64, 0x65, 0x76, 0x1a, 0x1e, 0x6a,
	0x75, 0x6c, 0x65, 0x73, 0x6d, 0x69, 0x63, 0x68, 0x61, 0x65, 0x6c, 0x67, 0x69, 0x6f, 0x76, 0x61,
	0x6e, 0x6e, 0x69, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x4a, 0x0a,
	0x12, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x20, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x67, 0x6a, 0x75, 0x6c, 0x65, 0x73, 0x2f,
	0x64, 0x65, 0x63, 0x6b, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x06, 0x76, 0x30, 0x2e, 0x33, 0x2e,
	0x32, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_transport_v1_deck_service_proto_rawDescOnce sync.Once
	file_transport_v1_deck_service_proto_rawDescData = file_transport_v1_deck_service_proto_rawDesc
)

func file_transport_v1_deck_service_proto_rawDescGZIP() []byte {
	file_transport_v1_deck_service_proto_rawDescOnce.Do(func() {
		file_transport_v1_deck_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_transport_v1_deck_service_proto_rawDescData)
	})
	return file_transport_v1_deck_service_proto_rawDescData
}

var file_transport_v1_deck_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_transport_v1_deck_service_proto_goTypes = []interface{}{
	(*CreateDeckRequest)(nil),   // 0: transport.v1.CreateDeckRequest
	(*CreateDeckResponse)(nil),  // 1: transport.v1.CreateDeckResponse
	(*OpenDeckRequest)(nil),     // 2: transport.v1.OpenDeckRequest
	(*OpenDeckResponse)(nil),    // 3: transport.v1.OpenDeckResponse
	(*DrawCardsRequest)(nil),    // 4: transport.v1.DrawCardsRequest
	(*DrawCardsResponse)(nil),   // 5: transport.v1.DrawCardsResponse
	(*ShuffleDeckRequest)(nil),  // 6: transport.v1.ShuffleDeckRequest
	(*ShuffleDeckResponse)(nil), // 7: transport.v1.ShuffleDeckResponse
	(*DeckClosed)(nil),          // 8: transport.v1.DeckClosed
	(*DeckOpened)(nil),          // 9: transport.v1.DeckOpened
	(*Card)(nil),                // 10: transport.v1.Card
}
var file_transport_v1_deck_service_proto_depIdxs = []int32{
	8,  // 0: transport.v1.CreateDeckResponse.deck:type_name -> transport.v1.DeckClosed
	9,  // 1: transport.v1.OpenDeckResponse.deck:type_name -> transport.v1.DeckOpened
	10, // 2: transport.v1.DrawCardsResponse.cards:type_name -> transport.v1.Card
	0,  // 3: transport.v1.DeckService.CreateDeck:input_type -> transport.v1.CreateDeckRequest
	2,  // 4: transport.v1.DeckService.OpenDeck:input_type -> transport.v1.OpenDeckRequest
	4,  // 5: transport.v1.DeckService.DrawCards:input_type -> transport.v1.DrawCardsRequest
	6,  // 6: transport.v1.DeckService.ShuffleDeck:input_type -> transport.v1.ShuffleDeckRequest
	1,  // 7: transport.v1.DeckService.CreateDeck:output_type -> transport.v1.CreateDeckResponse
	3,  // 8: transport.v1.DeckService.OpenDeck:output_type -> transport.v1.OpenDeckResponse
	5,  // 9: transport.v1.DeckService.DrawCards:output_type -> transport.v1.DrawCardsResponse
	7,  // 10: transport.v1.DeckService.ShuffleDeck:output_type -> transport.v1.ShuffleDeckResponse
	7,  // [7:11] is the sub-list for method output_type
	3,  // [3:7] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_transport_v1_deck_service_proto_init() }
func file_transport_v1_deck_service_proto_init() {
	if File_transport_v1_deck_service_proto != nil {
		return
	}
	file_transport_v1_deck_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_transport_v1_deck_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_v1_deck_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_v1_deck_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenDeckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_v1_deck_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenDeckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_v1_deck_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawCardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_v1_deck_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawCardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_v1_deck_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShuffleDeckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transport_v1_deck_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShuffleDeckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_transport_v1_deck_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transport_v1_deck_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_transport_v1_deck_service_proto_goTypes,
		DependencyIndexes: file_transport_v1_deck_service_proto_depIdxs,
		MessageInfos:      file_transport_v1_deck_service_proto_msgTypes,
	}.Build()
	File_transport_v1_deck_service_proto = out.File
	file_transport_v1_deck_service_proto_rawDesc = nil
	file_transport_v1_deck_service_proto_goTypes = nil
	file_transport_v1_deck_service_proto_depIdxs = nil
}
